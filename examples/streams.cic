-- data nat : Type := O : nat | S : nat -> nat.

codata stream (A ++:Type) : Type :=
   ccons : A -> stream A -> stream A.

define head : forall (A:Type). stream A -> A :=
   λ (A:Type) (xs:stream A) =>
      <A> cocase xs of
        ccons y _ => y
      end.

print head.

define tail : forall (A:Type). stream A -> stream A :=
   λ (A:Type) (xs:stream A) =>
      <stream A> cocase xs of
        ccons _ ys => ys
      end.

print tail.

cofixpoint zeroes <i> : stream<i> nat :=
     coin (ccons nat O (coin (ccons nat O (<stream nat>
                              cocase zeroes of
                              | ccons _ ys => ys
                              end)))).

print zeroes.

-- cofixpoint map (A B : Type) (f : A -> B) (xs : stream* A) : stream* B :=
--   <stream B>
--   cocase xs of
--   | ccons y ys => ccons B (f y) (map A B f ys)
--   end.

-- check head.
-- check ones.
-- print ccons.

-- eval (head nat ones).
-- eval (tail nat ones).

-- eval (head nat (tail nat (map nat nat (fun x : nat => S x) ones))).

codata stream (A ++:Type) : Type :=
   ccons : A -> stream A -> stream A.

fixpoint plus <i> (m: nat<i>) (n:nat) : nat :=
     < nat > case m of
             | O => n
             | S m' => in S (plus m' n)
             end.

print plus.

cofixpoint sum <i> (x:stream<i> nat) (y:stream<i> nat) : stream<i> nat :=
  coin <!stream nat> cocase x of
   | ccons x1 x2 => <!stream nat> cocase y of
                    | ccons y1 y2 => ccons nat (plus x1 y1) (sum x2 y2)
                    end
   end.

print sum.

cofixpoint fib <i> : stream<i> nat :=
  coin (ccons nat 0 (coin (ccons nat 1
      (sum fib (<stream nat> cocase fib of
                 | ccons _ y => y end))))).

print fib.


data vec (A++: Type) : nat -> Type :=
  | vnil : vec A O
  | vcons : forall n:nat. A -> vec A n -> vec A (S n).


define head := fun (x:stream nat) => <nat> cocase x of
                 | ccons x _ => x end.

define tail := fun (x:stream nat) => <stream nat> cocase x of
                 | ccons _ y => y end.

fixpoint nth <i> (n: nat<i>) (xs : stream nat) : nat :=
  <nat>
  case n of
  | O => head xs
  | S n' => nth n' (tail xs)
  end.

fixpoint vtake <i> (n : nat<i>) (xs : stream nat) : vec nat n :=
  <vec nat n1>
  case n1 := n of
  | O => vnil nat
  | S n' => vcons nat n' (head xs) (vtake n' (tail xs))
  end.


eval head fib.

eval tail fib.

eval nth 8 fib.

eval vtake 8 fib.

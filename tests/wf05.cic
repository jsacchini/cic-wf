codata stream (A ++:Type) : Type :=
   ccons : A -> stream A -> stream A.

fixpoint plus <i> (m: nat<i>) (n:nat) : nat :=
     < nat > case m of
             | O => n
             | S m' => in S (plus m' n)
             end.

print plus.

cofixpoint sum <i> (x:stream<i> nat) (y:stream<i> nat) : stream<i> nat :=
  coin <!stream nat> cocase x of
   | ccons x1 x2 => <!stream nat> cocase y of
                    | ccons y1 y2 => ccons nat (plus x1 y1) (sum x2 y2)
                    end
   end.

print sum.

cofixpoint fib <i> : stream<i> nat :=
  coin (ccons nat 0 (coin (ccons nat 1
      (sum fib (<stream nat> cocase fib of
                 | ccons _ y => y end))))).

print fib.


-- cofixpoint fib <i> : stream<i> nat :=
--   coin (ccons nat (in O) (coin (ccons nat (in (S (in O)))
--       (sum fib (<stream nat> cocase fib of
--                  | ccons _ y => y end))))).


-- print fib.

define head := fun (x:stream nat) => <nat> cocase x of
                 | ccons x _ => x end.

define tail := fun (x:stream nat) => <stream nat> cocase x of
                 | ccons _ y => y end.

-- print head.
-- print tail.

fixpoint nth <i> (n: nat<i>) (xs : stream nat) : nat :=
  <nat>
  case n of
  | O => head xs
  | S n' => nth n' (tail xs)
  end.

-- print nth.

eval head fib.

eval tail fib.

eval nth 0 fib.
eval nth 1 fib.
eval nth 2 fib.
eval nth 3 fib.
eval nth 4 fib.
eval nth 5 fib.
eval nth 6 fib.
eval nth 7 fib.
eval nth 8 fib.

-- print fib.

-- print sum.

eval (head (tail (tail fib))).

-- eval (head (tail fib)).

-- print head.
-- print tail.

-- define f0 := head fib.

-- print f0.
